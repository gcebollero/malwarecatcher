import requests
import os
import json
import time
import pyzipper
import urllib3
import Config
import Util


def should_stop():
    if Config.is_service_enabled(__name__):
        r = requests.get('http://localhost:5000/status').json()
        return bool(r['status'] == "off")
    else:
        return True


def malware_bazaar_run(VERBOSE):
    logger = Util.configure_log(__name__)
    if not os.path.exists(Config.FOLDER):
        os.makedirs(Config.FOLDER)

    full_data_dump = requests.get("https://bazaar.abuse.ch/export/txt/sha256/full/")
    if os.path.exists("../full_data_s256.zip"):
        os.remove('../full_data_s256.zip')

    with open("../full_data_s256.zip", 'wb') as fd:
        for chunk in full_data_dump.iter_content(chunk_size=128):
            fd.write(chunk)

    with pyzipper.AESZipFile('full_data_s256.zip') as zf:
        my_secrets = zf.read('full_sha256.txt')
        full_data_dump = (my_secrets.splitlines())

    obtained = 0
    total = 0
    for sha256 in full_data_dump:
        sha256 = sha256.decode('utf-8')
        if not sha256.startswith('#'):
            total += 1
            if os.path.exists(Config.FOLDER + '/' + sha256 + ".zip") and os.path.exists(Config.FOLDER + '/' + sha256 + ".json"):
                obtained += 1
    for sha256 in full_data_dump:

        sha256 = sha256.decode('utf-8')
        if sha256.startswith('#'):
            continue
        if os.path.exists(Config.FOLDER + '/' + sha256 + ".zip") and os.path.exists(Config.FOLDER + '/' + sha256 + ".json"):
            continue
        obtained += 1
        if should_stop():
            return None
        logger.debug('Downloading {} sample...'.format(sha256))
        try:
            info = requests.post("https://mb-api.abuse.ch/api/v1", {"query": "get_info", "hash": sha256})
            info = info.json()
            if info['query_status'] == 'ok':
                json.dump(info, open(Config.FOLDER + '/' + sha256 + ".json", "w"))
                item = requests.post("https://mb-api.abuse.ch/api/v1",
                    {"query": "get_file", "API-KEY": Config.retrieve_api_key(__name__),
                    "sha256_hash": sha256})
                Util.write_file(sha256, item)
        except json.decoder.JSONDecodeError:
            time.sleep(1)
        except urllib3.exceptions:
            time.sleep(60)
        except urllib3.exceptions.NewConnectionError:
            time.sleep(60)
        except requests.exceptions.ConnectionError:
            time.sleep(60)
        finally:
            time.sleep(0.1)
    logger.info("Stopping...")
