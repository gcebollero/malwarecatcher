import threading
from multiprocessing import Process
from multiprocessing.queues import Queue

import schedule
import VT_indexer
import HybridAnalysis_indexer
from Crawlers import MalwareBazaar, MalShare
import time
import FileChecker
import Config
import requests
import Util

from DB import DB

thread_list = {}
logger = Util.configure_log(__name__)


def __create_thread(thread_name: str):
    global thread_list
    thread_list[thread_name] = threading.Thread()


def __delete_stopped_processes():
    global thread_list
    candidates_for_deletion = []
    for thread in thread_list.keys():
        if not thread_list[thread].is_alive():
            candidates_for_deletion.append(thread)
    for key in candidates_for_deletion:
        del thread_list[key]


# Run a thread by name
def run_thread(thread_name: str, db: DB, vt_sha256_pending_scans: Queue):
    global thread_list
    # If API_KEY is missing, nothing to do
    if not Config.is_service_enabled(thread_name):
        return None
    logger.info("Starting {}".format(thread_name))
    if thread_name not in thread_list:
        __create_thread(thread_name)
    if thread_list[thread_name].is_alive():
        logger.warning("{} already running...".format(thread_name))
    else:
        thread = None
        # Check what service needs to be run
        if thread_name == HybridAnalysis_indexer.__name__ :
            thread = threading.Thread(target=HybridAnalysis_indexer.run, args=[db])
            thread.setName(HybridAnalysis_indexer.__name__)
            thread = Process(target=HybridAnalysis_indexer.run, args=(db,))
        elif thread_name == MalShare.__name__:
            thread = threading.Thread(target=MalShare.run, args=())
            thread.setName(MalShare.__name__)
        elif thread_name == MalwareBazaar.__name__:
            thread = threading.Thread(target=MalwareBazaar.malware_bazaar_run, args=([False]))
            thread.setName(MalwareBazaar.__name__)
        elif thread_name == VT_indexer.__name__:
            thread = threading.Thread(target=VT_indexer.run, kwargs=({'db':db, 'vt_sha256_pending_scans':vt_sha256_pending_scans}))
            thread.setName(VT_indexer.__name__)
        elif thread_name == FileChecker.__name__:
            thread = threading.Thread(target=FileChecker.run, args=())
            thread.setName(FileChecker.__name__)
        else:
            logger.warning("No source found for {}".format(thread_name))
            __delete_stopped_processes()
        # If a service is found, run thread
        if thread is not None:
            thread_list[thread_name] = thread
            thread_list[thread_name].start()


def init(**kwargs):
    global thread_list
    db = kwargs['db']
    vt_sha256_pending_scans = kwargs['vt_sha256_pending_scans']
    logger.info("Initializing Scheduler...")
    schedule.every().hour.do(run_thread, thread_name=MalwareBazaar.__name__, db=db, vt_sha256_pending_scans=None)
    schedule.every().minutes.do(run_thread, thread_name=VT_indexer.__name__, db=db, vt_sha256_pending_scans=vt_sha256_pending_scans)
    schedule.every().hour.do(run_thread, thread_name=MalShare.__name__, db=db, vt_sha256_pending_scans=None)
    schedule.every(30).minutes.do(run_thread, thread_name=HybridAnalysis_indexer.__name__, db=db, vt_sha256_pending_scans=None)
    schedule.every().hour.do(run_thread, thread_name=FileChecker.__name__, db=db, vt_sha256_pending_scans=None)
    schedule.run_all(2)
    while True:
        logger.debug('Active threads: {}'.format(threading.enumerate()))
        r = requests.get('http://localhost:5000/action')
        if r.json()['action'] == 'restart':
            logger.info('Restarting threads')
            schedule.run_all(2)
        else:
            schedule.run_pending()
        time.sleep(30)

