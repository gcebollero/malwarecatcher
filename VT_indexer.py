

from tinydb import  Query
import requests
import time
import Config
import Util


def _format_response(response: dict) -> dict:
    result = {'name': 'VirusTotal'}
    result.update({'scan_date': response['scan_date']})
    result.update({'permalink': response['permalink']})
    result.update({'total': response['total']})
    result.update({'positives': response['positives']})
    avs = []
    for av in response['scans']:
        avs.append({'name': av, 'result': response['scans'][av]['detected'], 'threat_found': response['scans'][av]['result']})
    result.update({'anti_virus_results': avs})
    return result


def run(**kwargs):
    db = kwargs['db']
    logger = Util.configure_log(__name__)
    pending_scans = kwargs['vt_sha256_pending_scans']
    Scan = Query()
    while not pending_scans.empty():
        next_search = pending_scans.get()
        if not db.search(Scan.sha256 == next_search and Scan.scanners.name == 'VirusTotal'):
            current_db_value = db.search_sha(next_search)[0]
            response = requests.get('https://www.virustotal.com/vtapi/v2/file/report?apikey={}&resource={}'.format(Config.retrieve_api_key(__name__), next_search))
            if response.status_code == 200:
                res = response.json()
                if res['response_code'] == 1:
                    # Scan available
                    # update missing values
                    current_db_value.update({'sha1': res['sha1']})
                    current_db_value.update({'md5': res['md5']})
                    current_db_value['scanners'][0] = _format_response(res)

                    db.upsert_document(document=current_db_value)
                time.sleep(15)
            elif response.status_code == 204:
                logger.warning('VT: Limit reached')
                return
            else:
                logger.error(response)
                logger.error(response.status_code)
                return
    logger.info('Stopping')
