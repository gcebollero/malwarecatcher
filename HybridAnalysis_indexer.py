import requests
import os
from tinydb import  Query
import Util
import pyzipper
import re
import Config
from DB import DB

headers = {
    'user-agent': 'Falcon Sandbox',
    'api-key': Config.retrieve_api_key(__name__)
}

logger = Util.configure_log(__name__)

def _upload(sample):
    try:
        with pyzipper.AESZipFile("malware_samples/" + sample + ".zip") as zf:
            zf.setpassword(b'infected')
            for name in zf.namelist():
                if re.search("[a-fA-F0-9]{64}\.exe", name):
                    data = {"scan_type": "all"}
                    file = {'file': zf.read(str(name))}

                    r = requests.post("https://www.hybrid-analysis.com/api/v2/quick-scan/file",
                                      headers=headers, files=file, data=data)
    except pyzipper.zipfile.BadZipFile:
        logger.warning("{} it's not a zip file!".format(sample))


def should_stop():
    if Config.is_service_enabled(__name__):
        r = requests.get('http://localhost:5000/status').json()
        return bool(r['status'] == "off")
    else:
        return True


def run(db: DB):
    cache = []
    FOLDER = 'HA-index/'
    if not os.path.exists(FOLDER):
        os.makedirs(FOLDER)
    total = Util.count_samples()
    pending_files = []
    logger.info('Generating pending file list...')
    for sample in Util.get_sample_list():
        sample = sample.split("/")[1]
        sample = sample.split(".")[0]
        if not db.search_sha(sample):
            pending_files.append(sample)
    logger.info('Done! Total pending files: {}'.format(len(pending_files)))
    for sample in pending_files:
        if should_stop():
            break
        logger.debug("Downloading {} file...".format(sample))
        r = requests.get("https://www.hybrid-analysis.com/api/v2/overview/{}".format(sample),
                         headers=headers)
        #print(r.headers['Api-Limits'])
        #print(r.headers['Submission-Limits'])
        if r.status_code == 404:
            _upload(sample)
            logger.info('Uploaded sample {}'.format(sample))
        elif r.status_code == 200:
            response = r.json()
            if 'message' in response:
                logger.info('{} -> {}'.format(sample,response))
            else:
                cache.append(r.json())
        elif r.status_code == 429:
            logger.warning("API quota exceeded.")
            break
        elif r.status_code == 500:
            # Unexpected error API
            continue
        else:
            logger.error(r.status_code)
            logger.error(r.text)
            logger.error(r.json())
            break
    logger.info('saving data')
    for item in cache:
        db.upsert_document(item)
    logger.info('Saved!. Stopping')
